import Foundation

// –ü—Ä–æ–≥—Ä–∞–º–º–∞, –º–æ–¥–µ–ª–∏—Ä—É—é—â–∞—è —Ñ–∞–±—Ä–∏–∫—É –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ // ???: üòµ
// –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç —Ñ–∞–±—Ä–∏–∫—É –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
//
// –û–ø–∏—à–∏—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¥–≤–∞ –∫–ª–∞—Å—Å–∞: –ß–µ–ª–æ–≤–µ–∫ (–§–ò–û, –≤–æ–∑—Ä–∞—Å—Ç, –ø–∞—Å–ø–æ—Ä—Ç), –ü–∞—Å–ø–æ—Ä—Ç (–°–µ—Ä–∏—è, –ù–æ–º–µ—Ä, –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏, –ß–µ–ª–æ–≤–µ–∫) –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏—Ö.

class Person {
    private(set) var firstName: String
    private(set) var lastName: String
    private(set) var middleName: String
    private(set) var age: Int
    
    private(set) var passport: Passport?
    
    init(firstName: String, lastName: String, middleName: String, age: Int, passport: Passport? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.middleName = middleName
        self.age = age
        if let passport = passport {
            issuePassport(passport)
        }
    }
    
    func issuePassport(_ passport: Passport) {
        self.passport = passport
        passport.issuePassport(to: self)
    }
}

extension Person: CustomStringConvertible {
    var description: String {
        var result = "üëΩ \(firstName) \(middleName) \(lastName), \(age)"
        if let passport = passport {
            result.append(" \(passport)")
        } else {
            result.append(" –ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–¥–∞–Ω")
        }
        return result
    }
}

class Passport {
    private(set) var series: String
    private(set) var number: String
    private(set) var dateOfIssue: Date
    
    weak private(set) var person: Person?

    init(series: String, number: String, dateOfIssue: Date) {
        self.series = series
        self.number = number
        self.dateOfIssue = dateOfIssue
    }
    
    func issuePassport(to person: Person) {
        self.person = person
    }
}

extension Passport: CustomStringConvertible {
    var description: String {
        "üé´ \(series) \(number) \(dateOfIssue)"
    }
}

let person = Person(firstName: "–í–∞—Å–∏–ª–∏–π", lastName: "–ü–µ—Ç—Ä–æ–≤–∏—á", middleName: "–ò–≤–∞–Ω–æ–≤", age: 42)
let passport = Passport(series: "12 34", number: "123456", dateOfIssue: Date())

print("–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:", person)
print("–ü–∞—Å–ø–æ—Ä—Ç:", passport)
print("–ö–æ–º—É –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç:", passport.person ?? "–ù–µ –≤—ã–¥–∞–Ω")

person.issuePassport(passport)

print("\n")
print("–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω:", person)
print("–ö–æ–º—É –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç:", passport.person ?? "–ù–µ –≤—ã–¥–∞–Ω")

let person2 = Person(firstName: "–û–ª—å–≥–∞", lastName: "–õ–æ–≥–∏–Ω–æ–≤–∞", middleName: "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞", age: 18, passport: Passport(series: "23 45", number: "234567", dateOfIssue: Date()))
print("\n")
print(person2)
